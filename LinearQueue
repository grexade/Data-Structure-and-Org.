#include <iostream>
#define QUEUE_SIZE 10
using namespace std;

struct LinearQueue
{
    int front;
    int rear;
    int items[QUEUE_SIZE];
};

void initializeQueue(struct LinearQueue *);
int isQueuefull(struct LinearQueue *);
void insert(struct LinearQueue *, int);
int isQueueEmpty(struct LinearQueue *);
int remove(struct LinearQueue *);
void display(struct LinearQueue *);
void copyqueue(struct LinearQueue *, struct LinearQueue *);
void modifyqueue (struct LinearQueue *, struct LinearQueue *);

int main()
{
    struct LinearQueue lq;
	initializeQueue(&lq);
	
	struct LinearQueue lawal;
	initializeQueue(&lawal);
	
	insert(&lq,3);
	insert(&lq,5);
	insert(&lq,16);
	insert(&lq,2);
	insert(&lq,8);
    
    modifyqueue(&lq, &lawal);
	
    display(&lq);
    cout<<endl;
    display(&lawal);
    
   
    return 0;
}

void initializeQueue(struct LinearQueue *l)
{
    l->front = 0; l->rear = -1;
}
int isQueueEmpty(struct LinearQueue *l)
{
    if (l->rear < l->front) return 1;
    else return 0;
}

int remove(struct LinearQueue *l)
{
    int x;
    if (isQueueEmpty(l))
	{   cout<<"Underflow: Queue is empty"<<endl; 
        exit(1);
    }
	else
	{
        x = l->items[l->front++];
        return x;
    }
}

int isQueuefull(struct LinearQueue *l)
{
    if (l->rear == QUEUE_SIZE - 1) return 1;
    else return 0;
}

void insert(struct LinearQueue *l, int x)
{
    if (isQueuefull(l))
    {
       cout<<"Overflow: Queue is full"<<endl;
       exit(1);
    }
    else
   	   l->items[++l->rear]=x;
}

void display(struct LinearQueue *l){
	int x;
	struct LinearQueue temp;
	initializeQueue(&temp);
	while(!isQueueEmpty(l))
	{
	x= remove(l);
	cout<<x<<endl;
	insert(&temp,x);
	}
	while(!isQueueEmpty(&temp))
	{
	x= remove(&temp);
	insert(l,x);
	}

}

void copyqueue(struct LinearQueue *source, struct LinearQueue *destination){
	int x;
	struct LinearQueue temp;
	initializeQueue(&temp);
	while(!isQueueEmpty(source))
	{
	x= remove(source);
	insert(&temp,x);
	}
	while(!isQueueEmpty(&temp))
	{
	x= remove(&temp);
	insert(source,x);
	insert(destination,x);
	}
}

void modifyqueue (struct LinearQueue *org, struct LinearQueue *mod){
	int x;
	struct LinearQueue temp;
	initializeQueue(&temp);
	while(!isQueueEmpty(org))
	{
	x= remove(org);
	insert(&temp,x);
	}
	while(!isQueueEmpty(&temp))
	{
	x= remove(&temp);
	insert(org,x);
	if (x>=5)
		insert(mod,1);
	else
		insert(mod,0);
	}
}






