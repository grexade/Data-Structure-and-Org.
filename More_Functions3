#include <iostream>
#include <cstdlib>
using namespace std;

struct node
{
    int data;
    struct node *next;
};

struct node *createNode(int);
struct node *insertBack(struct node *, int);
struct node *insertFront(struct node *, int);
void insertAfter(struct node *, int);
void deleteAfter(struct node *);
struct node *deleteFront(struct node *);
struct node *deleteBack(struct node *);
void displayList(struct node *);
struct node *merge_lists(struct node *, struct node *);
struct node* moveNLLToEnd(struct node *, int );
struct node *moveNLLToFront(struct node *my, int n) ;
void list2array (struct node *, int []);


int main(void)
{

    struct node *header = NULL;
    struct node *header2 = NULL;

    

    header = insertBack(header, 3);
    header = insertBack(header, 4);
    header = insertBack(header, 8);
    header = insertBack(header, 9);
    header = insertBack(header, 12);
    
    header2 = insertBack(header2, 10);
    header2 = insertBack(header2, 20);
    header2 = insertBack(header2, 30);
    header2 = insertBack(header2, 40);
    header2 = insertBack(header2, 50);

    
    displayList(header);
    cout<<endl;
    // displayList(header2);
    int arr[5];

    list2array (header, arr);
    cout<<endl;
    for(int i; i<5; i++){
        cout<<arr[i];
    }
    // merge_lists(header, header2);
    // header = moveNLLToEnd(header, 3);
    // header2 = moveNLLToFront(header2, 4);
    // cout<<endl;
    // displayList(header);
    // cout<<endl;
    // displayList(header2);

    return 0;
}

int isEmpty(struct node *header)
{
    if (header == NULL)
        return 1;
    else
        return 0;
}

struct node *createNode(int item)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(node));
    temp->data = item;
    temp->next = NULL;
    return temp;
}

void deleteAfter(struct node *afterNode)
{
    struct node *temp;
    // If next node of afterNode or afterNode is NULL,
    // we cant remove anything
    if (afterNode->next == NULL || afterNode == NULL)
        return;
    // Set temp to next node of afterNode
    temp = afterNode->next;
    // Set afterNode's next node to temp's next node.
    afterNode->next = temp->next;
    free(temp);
}

struct node *deleteFront(struct node *header)
{
    // Create temp node
    struct node *temp;
    // Check if the list is empty
    if (header == NULL)
    {
        return header;
    }
    // Assign header to temp
    temp = header;
    // Point header, to next node
    header = header->next;
    // Free temp
    free(temp);
    // Return new header
    return header;
}

struct node *deleteBack(struct node *header)
{

    struct node *temp, *headertemp;

    if (header == NULL)
    {
        return header;
    }

    headertemp = header;

    while (headertemp->next->next != NULL)
    {
        headertemp = headertemp->next;
    }

    temp = headertemp->next;
    headertemp->next = NULL;

    free(temp);

    return header;
}

void insertAfter(struct node *afterNode, int data)
{

    struct node *temp = createNode(data);

    temp->next = afterNode->next;

    afterNode->next = temp;
}

struct node *insertBack(struct node *header, int data)
{
    struct node *temp, *last;
    temp = createNode(data);

    if (isEmpty(header))
    {
        header = temp;
        return header;
    }
    last = header;
    while (last->next != NULL)
        last = last->next;

    last->next = temp;

    return header;
}

struct node *insertFront(struct node *header, int data)
{

    struct node *temp = createNode(data);

    temp->next = header;

    header = temp;

    return header;
}

void displayList(struct node *header)
{
    if (header == NULL)
        cout << "List is empty" << endl;

    struct node *temp = header;

    while (temp != NULL)
    {
        cout << temp->data << " --> ";
        temp = temp->next;
    }
    cout << endl;
}

struct node *merge_lists(struct node *list1, struct node *list2)
{
    if (list1 == NULL)
        return list2;
    if (list2 == NULL)
        return list1;

    struct node *temp = list1;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = list2;
    return list1;
}


struct node *moveNLLToEnd(struct node *mylist, int n) {
    if (mylist == NULL || n <= 0)
        return mylist;

    struct node *current = mylist;
    struct node *prev = NULL;

    for (int i = 1; i < n; i++) {
        prev = current;
        current = current->next;
    }

    if (current == NULL || current->next == NULL)
        return mylist; 

    if (prev != NULL)
        prev->next = current->next;
    else
        mylist = current->next;

    struct node *last = current->next;
    while (last->next != NULL)
        last = last->next;

    current->next = NULL;
    last->next = current;

    return mylist;
}

struct node *moveNLLToFront(struct node *mylist, int n) {
    if (mylist == NULL || n <= 0)
        return mylist;

    struct node *current = mylist;
    struct node *prev = NULL;

    for (int i = 1; i < n; i++) {
        prev = current;
        current = current->next;
    }

    if (current == NULL || current == mylist)
        return mylist; 

    if (prev != NULL)
        prev->next = current->next;

    current->next = mylist;
    mylist = current;

    return mylist;
}

void list2array (struct node *p, int a[]) {
  
  if (p == NULL) {
    return;
  }

  struct node *temp = p;

  int i = 0;
  
  while (temp != NULL) {
    a[i] = temp->data;  
    i++;  
    temp = temp->next;  
  }
}

